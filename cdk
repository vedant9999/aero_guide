import * as cdk from '@aws-cdk/core';
import * as s3 from '@aws-cdk/aws-s3';
import * as apigateway from "@aws-cdk/aws-apigateway";
import * as lambda from "@aws-cdk/aws-lambda";

export class CdkStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // const bucket = new s3.Bucket(this, "WidgetStore");

    const handler = new lambda.Function(this, "WidgetHandler", {
      runtime: lambda.Runtime.JAVA_8, // So we can use async in widget.js
      code: lambda.Code.fromAsset("../../target/newproject-0.0.1-SNAPSHOT.jar"),
      handler: "Project.comm.newproject.App::handleRequest",
      // environment: {
      //   BUCKET: bucket.bucketName
      // }
    });

    // bucket.grantReadWrite(handler); // was: handler.role);

    // const api = new apigateway.RestApi(this, "widgets-api", {
    //   restApiName: "Widget Service",
    //   description: "This service serves widgets."
    // });

    // const getWidgetsIntegration = new apigateway.LambdaIntegration(handler, {
    //   requestTemplates: { "application/json": '{ "statusCode": "200" }' }
    // });

    // api.root.addMethod("GET", getWidgetsIntegration); // GET /
  }
}
